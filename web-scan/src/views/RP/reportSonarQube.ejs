<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>SonarQube SAST Report</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #f5f7fa;
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }

    h1 {
      font-size: 2rem;
      font-weight: 600;
      color: #0d6efd;
    }

    .card {
      border-radius: 12px;
      border: none;
    }

    .alert-high {
      border-left: 6px solid #dc3545;
      background-color: #f8d7da;
    }

    .alert-medium {
      border-left: 6px solid #fd7e14;
      background-color: #fff3cd;
    }

    .alert-low {
      border-left: 6px solid #ffc107;
      background-color: #fff8e1;
    }

    .alert-info {
      border-left: 6px solid #0dcaf0;
      background-color: #cff4fc;
    }

    .alert-title {
      font-weight: 600;
      font-size: 1.1rem;
    }

    pre {
      white-space: pre-wrap;
      word-break: break-word;
      background-color: #f1f1f1;
      padding: 0.5rem;
      border-radius: 5px;
    }

    .btn {
      min-width: 90px;
    }
  </style>

</head>

<body>
  <div class="container my-4">
    <h1 class="mb-3">SonarQube SAST Report</h1>
    <div class="mb-4 text-muted">
      <div>Total Issues: <%= data.total %>
      </div>
      <div>Effort Total: <%= data.effortTotal %>
      </div>
    </div>

    <!-- Filter Section -->
    <div class="card p-3 mb-4 shadow">
      <form id="filterForm" class="row g-3">
        <div class="col-md-3">
          <label for="severityFilter" class="form-label">Filter by Severity</label>
          <select class="form-select" id="severityFilter" name="severity">
            <option value="">All</option>
            <option value="CRITICAL">Critical</option>
            <option value="MAJOR">Major</option>
            <option value="MINOR">Minor</option>
          </select>
        </div>
        <div class="col-md-3">
          <label for="sortSelect" class="form-label">Sort By</label>
          <select class="form-select" id="sortSelect">
            <option value="">Default</option>
            <option value="name-asc">Rule Name ↑</option>
            <option value="name-desc">Rule Name ↓</option>
            <option value="severity-asc">Severity ↑</option>
            <option value="severity-desc">Severity ↓</option>
          </select>
        </div>
        <div class="col-md-3">
          <label for="searchName" class="form-label">Rule or File Contains</label>
          <input type="text" class="form-control" id="searchName" name="name" placeholder="e.g. Dockerfile, S125">
        </div>
        <div class="col-md-3 align-self-end d-flex gap-2">
          <button type="button" class="btn btn-primary" onclick="applyFilter()">Apply</button>
          <button type="button" class="btn btn-secondary" onclick="resetFilter()">Clear</button>
        </div>
      </form>
    </div>

    <% data.issues.forEach(function(issue, idx) { var sev=(issue.severity || '' ).toLowerCase(); var
      sevClass=sev==='critical' ? 'alert-high' : sev==='major' ? 'alert-medium' : sev==='minor' ? 'alert-low'
      : 'alert-info' ; %>
      <div class="mb-4 p-3 bg-white shadow rounded <%= sevClass %> alert-item" data-severity="<%= sev %>"
        data-alert-name="<%= issue.rule.toLowerCase() %> <%= issue.component.toLowerCase() %> <%= issue.message.toLowerCase() %>">
        <div class="alert-title mb-1">
          <% let icon=sev==='critical' ? '🔴' : sev==='major' ? '🟠' : sev==='minor' ? '🟡' : 'ℹ️' ; %>
            <%= icon %>
              <%= issue.rule %>
                (<span class="text-danger">
                  <%= issue.severity %>
                </span>)
        </div>
        <div class="mb-1"><span class="fw-semibold">File:</span> <code><%= issue.component %></code></div>
        <div class="mb-1"><span class="fw-semibold">Line:</span>
          <%= issue.line || '-' %>
        </div>
        <div class="mb-2"><span class="fw-semibold">Message:</span>
          <%= issue.message %>
        </div>
        <% if(issue.tags && issue.tags.length) { %>
          <div class="mb-1"><span class="fw-semibold">Tags:</span>
            <%= issue.tags.join(', ') %></div>
        <% } %>
        <% if(issue.impacts && issue.impacts.length) { %>
          <div class="mb-1"><span class="fw-semibold">Impacts:</span>
            <%= issue.impacts.map(i => i.softwareQuality + ' (' + i.severity + ')' ).join(', ') %>
          </div>
        <% } %>
        <div class="mb-1"><span class="fw-semibold">Type:</span> <%= issue.type %></div>
        <% if(issue.quickFixAvailable) { %>
          <div class="mb-1 text-success"><strong>Quick Fix Available</strong></div>
        <% } %>
        <% if(issue.effort) { %>
          <div class="mb-1"><span class="fw-semibold">Estimated Fix:</span> <%= issue.effort %></div>
        <% } %>
        <% if(issue.status) { %>
          <div class="mb-1"><span class="fw-semibold">Status:</span> <%= issue.status %></div>
        <% } %>
      </div>
    <% }); %>
    <% if (!data.issues || data.issues.length === 0) { %>
      <div class="alert alert-success">No issues found.</div>
    <% } %>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function sortAlerts() {
      const sortValue = document.getElementById("sortSelect").value;
      const riskRank = {
        blocker: 4,
        critical: 3,
        high: 3,
        major: 2,
        medium: 2,
        minor: 1,
        low: 1,
        info: 0
      };

      function getCompareFn(value) {
        if (value === "name-asc")
          return (a, b) => a.dataset.alertName.localeCompare(b.dataset.alertName);
        if (value === "name-desc")
          return (a, b) => b.dataset.alertName.localeCompare(a.dataset.alertName);
        if (value === "severity-asc")
          return (a, b) => riskRank[a.dataset.severity] - riskRank[b.dataset.severity];
        if (value === "severity-desc")
          return (a, b) => riskRank[b.dataset.severity] - riskRank[a.dataset.severity];
        return null;
      }

      const compareFn = getCompareFn(sortValue);
      if (!compareFn) return;

      const container = document.querySelector(".container");
      const alertItems = Array.from(document.querySelectorAll(".alert-item"))
        .filter(el => el.style.display !== "none"); // only sort visible ones

      if (alertItems.length) {
        const parent = alertItems[0].parentElement;
        const sorted = alertItems.sort(compareFn);
        sorted.forEach(el => parent.appendChild(el));
      }
    }

    function applyFilter() {
      var sev = document.getElementById(`severityFilter`).value.toLowerCase();
      var name = document.getElementById(`searchName`).value.trim().toLowerCase();
      var alerts = document.querySelectorAll(`.alert-item`);
      alerts.forEach(function (alert) {
        var show = true;
        if (sev && alert.dataset.severity !== sev) show = false;
        if (name && !alert.dataset.alertName.includes(name)) show = false;
        alert.style.display = show ? `` : `none`;
      });
      sortAlerts(); // <-- Gọi sau khi lọc
    }

    function resetFilter() {
      document.getElementById(`severityFilter`).value = ``;
      document.getElementById(`searchName`).value = ``;
      applyFilter();
    }
  </script>
</body>

</html>